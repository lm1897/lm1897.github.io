<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>网络流学习笔记</title>
    <url>/2020/11/04/netflow%20note/</url>
    <content><![CDATA[<p>（语言风格和讲述内容可能只有自己猜看的懂，如果是要学习算法就去看其它大佬的博客吧</p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><blockquote>
<p>网络流是在图论中解决一类对于边权有限制问题的算法<br>但是主要的难题是建模<br><del>大部分情况下就是你建完边之后直接贴板子就行了</del><br><a id="more"></a></p>
</blockquote>
<p>在图论可以看到类似对某条边通过 事物数量有限制的题目，而推广一下不同二元关系不同收益，DAG上的无公共边路径查找同样可以使用网络流模型</p>
<hr>
<h1 id="2-dinic算法"><a href="#2-dinic算法" class="headerlink" title="2.dinic算法"></a>2.dinic算法</h1><p>EK-sharp算法就不介绍了吧）直接上dinic</p>
<p>1、建反向边</p>
<p>2、bfs标记深度</p>
<p>3、dfs中的当前弧优化，即cur</p>
<h2 id="2-1几个坑点"><a href="#2-1几个坑点" class="headerlink" title="2.1几个坑点"></a>2.1几个坑点</h2><ul>
<li>初始化tot=-1，也要memset head 为-1 循环break条件为~i</li>
<li>有时候要初始化流量为$\infty$</li>
<li>流量不为0才能在bfs中标号，才能在dfs中返回di，否则dfs返回</li>
<li>dfs的flow初始化为$\infty$</li>
</ul>
<blockquote>
<p>这里的例题是P1361小M的作物<br><del>实际上这题还是不算是例题应该拿模板题才对</del></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,x,y) for(int i=(x);i&lt;=(y);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FN(i,x,y) for(int i=(x);i&gt;=(y);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) ch[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) ch[x][1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpi(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="comment">//#define int ll </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line">	x=f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> head[N],to[M],nxt[M],w[M],tot=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,b[N],cur[N],dep[N];</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="keyword">int</span> sum,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">	to[++tot]=v;nxt[tot]=head[u];head[u]=tot;w[tot]=l;</span><br><span class="line">&#125;<span class="comment">//当前弧优化i开引用 //循环到头i=-1用~i</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">	adde(u,v,l);adde(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">	dep[s]=<span class="number">1</span>;q.push(s);</span><br><span class="line">	<span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">		<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=nxt[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> v=to[i];</span><br><span class="line">			<span class="keyword">if</span>(!dep[v]&amp;&amp;w[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[t]!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)<span class="keyword">return</span> flow;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[u];~i;i=nxt[i])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[to[i]]==dep[u]+<span class="number">1</span>&amp;&amp;w[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> di=dfs(to[i],min(flow,w[i]));</span><br><span class="line">			<span class="keyword">if</span>(di&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				w[i]-=di;</span><br><span class="line">				w[i^<span class="number">1</span>]+=di;<span class="keyword">return</span> di;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	read(n);</span><br><span class="line">	<span class="keyword">int</span> x,y,xx,yy;</span><br><span class="line">	<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">	F(i,<span class="number">1</span>,n)read(x),add(<span class="number">0</span>,i,x),sum+=x;</span><br><span class="line">	F(i,<span class="number">1</span>,n)read(b[i]),sum+=b[i];</span><br><span class="line">	read(m);t=n+(m&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">	F(i,<span class="number">1</span>,n)add(i,t,b[i]);</span><br><span class="line">	F(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">		<span class="keyword">int</span> h1=n+((i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>),h2=h1+<span class="number">1</span>;</span><br><span class="line">		read(x);read(xx);read(yy);add(<span class="number">0</span>,h1,xx);add(h2,t,yy);</span><br><span class="line">		sum+=(xx+yy);</span><br><span class="line">		F(j,<span class="number">1</span>,x)&#123;</span><br><span class="line">			read(y);add(h1,y,inf);add(y,h2,inf);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">		F(i,<span class="number">0</span>,t)cur[i]=head[i];</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">int</span> d=dfs(s,inf))ans+=d;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;sum-ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-常用手段"><a href="#3-常用手段" class="headerlink" title="3.常用手段"></a>3.常用手段</h1><h2 id="3-1超级源超级汇"><a href="#3-1超级源超级汇" class="headerlink" title="3.1超级源超级汇"></a>3.1超级源超级汇</h2><p>在一些题目中我们会与到源点有好几个，汇点有好几个的情况，这种时候我们建立超级源点和超级汇点分别连向所有源点和汇点，流量为$\infty$。于是我们又回到了只有一个源点和只有一个汇点的情况</p>
<h2 id="3-2拆点"><a href="#3-2拆点" class="headerlink" title="3.2拆点"></a>3.2拆点</h2><p>这又是一种常见的手法。题目有时候会限制某个点流入的流量和流出的流量，此时可以把一个节点拆成两个，两个节点各自连边，两个节点之间在结合题目连具体流量的边。当然了也不知有这种情况，可能结合具体题目拆点会比较好建模一点，比如网络流24题的DAG路径规划</p>
<h2 id="3-3最小割建模"><a href="#3-3最小割建模" class="headerlink" title="3.3最小割建模"></a>3.3最小割建模</h2><p>在图论当中有一个著名定理，最大流最小割定理，即最大流量等于把点集拆分成两个子集的最小花费。最小割一般用来表示花费最少的代价达到目的，最终答案一般会用总价值扣去最小割，比如上面的例题就是</p>
<h2 id="3-4无穷流量"><a href="#3-4无穷流量" class="headerlink" title="3.4无穷流量"></a>3.4无穷流量</h2><p>在最小割中我们不希望一条边被割掉，此时我们只需要把这条边的流量设置为$+\infty$</p>
<h2 id="3-5二元关系建边-虚拟节点"><a href="#3-5二元关系建边-虚拟节点" class="headerlink" title="3.5二元关系建边/虚拟节点"></a>3.5二元关系建边/虚拟节点</h2><p>上面的例题中，我们知道两种植物如果种在一个田地里会有附加值，于是考虑新建虚拟节点X，S-&gt;X流量为附加值，X-&gt;两中植物流量无穷，于是可以发现只要有一个植物被割到和T在一起就一定会损掉附加值大小的费用正好符合我们的需要，类似的可以把所有的二元关系进行表达，具体实现细节见上面代码</p>
<hr>
<h1 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h1><p>没啥推荐的例题吧网络流<del>24题不就很多了吗</del></p>
]]></content>
      <categories>
        <category>oi相关</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>lgmz</title>
    <url>/2020/11/04/lgmz/</url>
    <content><![CDATA[<script type="math/tex; mode=display">
\left\{ \begin{array}{l}
    \nabla \cdot \boldsymbol{E}=\frac{\rho}{\varepsilon _0}\\
    \nabla \times \boldsymbol{E}=-\frac{\partial \boldsymbol{B}}{\partial t}\\
    \nabla \cdot \boldsymbol{B}=0\\
    c^2\nabla \times \boldsymbol{B}=\frac{\boldsymbol{j}}{\varepsilon _0}+\frac{\partial \boldsymbol{E}}{\partial t}c^2\\
\end{array} \right.</script><hr>
<script type="math/tex; mode=display">
\left\{ \begin{array}{l}
    \iint_{\partial \Omega}{\boldsymbol{E}\cdot \text{d}s}=\frac{Q}{\varepsilon _0}\\
    \iint_{\partial \Omega}{\boldsymbol{B}\cdot \text{d}s}=0\\
    \oint_{\partial \Omega}{\boldsymbol{E}\cdot \text{d}\ell}=-\frac{\text{d}\varPhi _B}{\text{d}t}\\
    \oint_{\partial \Sigma}{\boldsymbol{B}\cdot \text{d}\ell}=\mu _0I+\mu _0\varepsilon _0\frac{\text{d}\varPhi _E}{\text{d}t}\\
\end{array} \right.</script><script type="math/tex; mode=display">
x=\pi =3.14159\lim_{\Delta x\rightarrow 0} \lim_{x\rightarrow a} \boldsymbol{\tau }\dot{x}\vec{e}\boldsymbol{\vec{e}}</script>]]></content>
      <tags>
        <tag>乱搞</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>begin</tag>
      </tags>
  </entry>
  <entry>
    <title>P6477序列题解</title>
    <url>/2020/04/26/solution%20to%20P6477/</url>
    <content><![CDATA[<p>（小声bb：考场上没写出来，太菜了</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><del>直觉</del><strong>告诉</strong>我们，看到这个$n&lt;=1e6$还有2s的时限，应该就是$O(nlogn)$的复杂度没错了，但是我们要怎么整出这个复杂度<br><a id="more"></a><br>看一下要求的东西：<script type="math/tex">\sum_{i=1}^{n}\sum_{j=i}^{n}(f(i,j))^2</script><br>拆开，考虑对于每个$i$单独求解$\sum_{j=i}^{n}(f(i,j))^2$,然后我们还要整出一个$log$，看一下相邻两个关于i的值能不能$log$转移</p>
<p>$i-1$会对$i$造成什么影响？如果一个区间$[i,j]$<strong>至少</strong>有一个和$a[i-1]$相同的数那么$f(i,j)=f(i-1,j)$，否则等于后者减1</p>
<p>我们还可以发现，如果区间$[i,j]$<strong>至少</strong>含有，那么区间$[i,j+1]$一定也<strong>至少</strong>含有一个和$a[i-1]$相同的数<br>那么我们可以做一个预处理，对于每个位置，在后面找到和这个位置值相同的最靠前的位置，设为$nxt[i]$，那么$i-1,i$的两个求和，有差别的部分就在</p>
<script type="math/tex; mode=display">\sum_{j=i-1}^{nxt[i-1]-1}(f(i-1.j)^2),\sum_{j=i}^{nxt[i-1]-1}(f(i,j)^2)=\sum_{j=i}^{nxt[i-1]-1}((f(i-1.j)-1)^2)</script><p>两部分的差值是什么！！？前者比后者大$2\sum_{j=i-1}^{nxt[i-1]-1}f(i-1,j)-(nxt[i-1]-j+1)$<del>比较显然</del>实际上只要计算一下就可以算出来这个式子了</p>
<p>做完之后，区间$[i-1,nxt[i-1]-1]$的值都要扣1，现在该分析的都分析完了。可以发现树状数组\线段树是维护这个序列，当然了我们一开始要先计算出$f(1,1…n)$的值，然后建树。</p>
<p><del>我有点口胡说的不是很清楚</del><br>大概就这样吧如果有人看的到的话就看代码帮助理解吧<br><del>虽然代码也没有注释</del></p>
<h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><p>常数有点大，算是卡过去的，原本是想写树状数组的，但是看卡过去了就不想写了<del>懒</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,x,y) for(int i=(x);i&lt;=(y);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) ch[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) ch[x][1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpi(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line">	x=f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,nn;<span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="keyword">int</span> sum[N&lt;&lt;<span class="number">2</span>],add[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> nowsum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">L <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		sum[k]=b[l];<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">	build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	sum[k]=sum[k&lt;&lt;<span class="number">1</span>]+sum[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">L <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(add[k])&#123;</span><br><span class="line">		sum[k&lt;&lt;<span class="number">1</span>]+=add[k]*(mid-l+<span class="number">1</span>);add[k&lt;&lt;<span class="number">1</span>]+=add[k];</span><br><span class="line">		sum[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[k]*(r-mid);add[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=add[k];</span><br><span class="line">		add[k]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">L <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">		add[k]-=<span class="number">1</span>;sum[k]+=-(r-l+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	pushdown(k,l,r,mid);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)change(k&lt;&lt;<span class="number">1</span>,l,mid,x,y);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;y)change(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">	sum[k]=sum[k&lt;&lt;<span class="number">1</span>]+sum[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">L <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">		<span class="keyword">return</span> sum[k];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;<span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">	pushdown(k,l,r,mid);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)now+=query(k&lt;&lt;<span class="number">1</span>,l,mid,x,y);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;y)now+=query(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	read(n);F(i,<span class="number">1</span>,n)read(a[i]),b[i]=a[i];</span><br><span class="line">	sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>);nn=unique(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>; </span><br><span class="line">	F(i,<span class="number">1</span>,n)a[i]=lower_bound(b+<span class="number">1</span>,b+nn+<span class="number">1</span>,a[i])-b;</span><br><span class="line">	nowsum=b[<span class="number">1</span>]=<span class="number">1</span>;vis[a[<span class="number">1</span>]]=<span class="number">1</span>;nxt[<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">	F(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">		nxt[i]=n+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(vis[a[i]])&#123;</span><br><span class="line">			b[i]=b[i<span class="number">-1</span>];nxt[vis[a[i]]]=i;</span><br><span class="line">			vis[a[i]]=i;	</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			b[i]=b[i<span class="number">-1</span>]+<span class="number">1</span>;vis[a[i]]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		nowsum=(nowsum+b[i]*b[i]%mod)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	ans=nowsum;</span><br><span class="line">	F(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">		change(<span class="number">1</span>,<span class="number">1</span>,n,i,nxt[i]<span class="number">-1</span>);</span><br><span class="line">		nowsum=(nowsum-(<span class="number">2</span>*query(<span class="number">1</span>,<span class="number">1</span>,n,i,nxt[i]<span class="number">-1</span>)%mod)-(nxt[i]-i))%mod+mod;</span><br><span class="line">		nowsum%=mod;ans=(ans+nowsum)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oi相关</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P6186冒泡排序题解</title>
    <url>/2020/04/26/the%20solution%20to%20P6186/</url>
    <content><![CDATA[<h1 id="一点想法"><a href="#一点想法" class="headerlink" title="一点想法"></a>一点想法</h1><p>实际上看了题解大家都知道了，是用树状数组，但是个人认为自己的树状数组做法比较简洁一点（可能?）这里跟大家分享一下</p>
<a id="more"></a>
<p>我们设$now$为当前的全局逆序对数，$a[i]$为下标为$i$的值，$pre[i]$为在$i$之前的，比$a[i]$大的数的个数</p>
<p>我们考虑两个操作干了什么</p>
<h2 id="操作1-交换s"><a href="#操作1-交换s" class="headerlink" title="操作1 交换s"></a>操作1 交换s</h2><p>不妨设下标为$i,i+1$的两个数交换，那么$a[i]$交换肯定不用说。考虑两个数的大小关系（交换之前）：</p>
<p><script type="math/tex">a[i]>a[i+1]</script>那么$pre[i+1]-=1$再交换，且$now-=1$。</p>
<p><script type="math/tex">a[i]<a[i+1]</script>那么$pre[i]+=1$再交换，且$now+=1$。因为是排列，所以不用考虑等号。</p>
<h2 id="操作2-求值"><a href="#操作2-求值" class="headerlink" title="操作2 求值"></a>操作2 求值</h2><p>通过手动模拟我们可以发现，总是一个局部最大值一直往后移动，移到第一个比它大的数前面，然后以此类推。然后我们还可以发现这些数的$pre$值保持不变，其他数的值为正减掉1。</p>
<p>所以每轮冒泡排序之后，$pre$为正则扣1，为0则不变</p>
<p>我们考虑把$pre$放到树状数组$f$里面，对于每个$pre$，$f[1…pre]$都加1，然后我们想一想求到$k$的前缀和，得到的答案就是$k$轮冒泡排序之后减少的逆序对数，题目要求当前有多少，那么用$now$扣掉减少的就是答案</p>
<p>具体实现细节看代码</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,x,y) for(int i=(x);i&lt;=(y);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) ch[x][0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) ch[x][1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mpi(x,y) make_pair(x,y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lwb(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();<span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">1</span>;ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=getchar();</span><br><span class="line">	x=f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;<span class="keyword">int</span> now;</span><br><span class="line"><span class="keyword">int</span> pre[N],c[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(pos&lt;=n)&#123;</span><br><span class="line">		f[pos]+=v;pos+=lwb(pos);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(pos)&#123;</span><br><span class="line">		ans+=f[pos];pos-=lwb(pos);</span><br><span class="line">	&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	read(n);read(m);</span><br><span class="line">	F(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		read(a[i]);</span><br><span class="line">		update(a[i],<span class="number">1</span>);</span><br><span class="line">		pre[i]=i-sum(a[i]);</span><br><span class="line">		c[i]=pre[i];</span><br><span class="line">		now+=pre[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">	sort(c+<span class="number">1</span>,c+n+<span class="number">1</span>);<span class="keyword">int</span> lst=<span class="number">0</span>;</span><br><span class="line">	F(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">		F(j,lst+<span class="number">1</span>,c[i])update(j,n-i+<span class="number">1</span>);</span><br><span class="line">		lst=c[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="keyword">int</span> t,c;read(t);read(c);</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">			swap(a[c],a[c+<span class="number">1</span>]);swap(pre[c],pre[c+<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(a[c]&gt;a[c+<span class="number">1</span>])&#123;</span><br><span class="line">				++pre[c+<span class="number">1</span>];++now;</span><br><span class="line">				update(pre[c+<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				--now;</span><br><span class="line">				update(pre[c],<span class="number">-1</span>);--pre[c];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			c=min(c,n<span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;now-sum(c)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>谢谢阅读！</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
